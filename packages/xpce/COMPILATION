				Compiling XPCE
				Jan Wielemaker
				   01/11/94


Prerequisites:
==============

* A source LICENCE agreement!

* A supported Unix machine with a supported operating system.

* A recent copy of the GNU-Project C-compiler gcc.  Versions known to
  work are gcc-2.x.y, where 3<=x<=5 and y>x.  Some others are fine too.
  The most recent version 2.6.0 is not tested yet.  The C++ interface
  is written in C++ and therefore you need to have g++ installed too
  to include this (./configure is clever enough to omit the C++ interface
  if you have g++ not installed).

* A recent copy of the GNU-Project `make' utility.  Versions tested are
  3.62 and 3.71.  Most versions will do.  The native make utility provided
  with many operating systems won't.

* If you want to link to SWI-Prolog to create XPCE/SWI-Prolog, SWI-Prolog
  version 1.9.2 or later must be installed (using make install) as one of
  `pl', `swipl' or `swi-prolog'.  The automatic configuration script will
  call SWI-Prolog to determine system parameters of it.


Preparation:
============

* Run ./configure.  On some systems this requires

	% sh configure [--prefix=<installation dir>]

  The default installation prefix is /usr/local, installing XPCE/SWI-Prolog
  in

	/usr/local/bin/xpce-<version>

  and its libraries in

	/usr/local/lib/xpce-<version>

  configure is an automatic configuration script generated by GNU autoconf
  (currently version 2.0).  It analyses your system by running many tests
  and finally creates:

	config.h	from config.h.in
	Makefile	from Makefile.in
	install-pl-bins from install-pl-bins.in
        install		from install.in

  ./configure generally should do a good job, surely if you are using
  gcc.  The most risky part is how XPCE/SWI-Prolog must be linked. The
  xpce executable is a SWI-Prolog saved-state (when possible) and there
  is a dependency between SWI-Prolog saved-states and Unix shared libraries:

  	* On very few systems, all libraries may be shared.
	* On some systems, static linking of -lc suffices
	* On others, all SWI-Prolog's own libraries must be linked
	  statically.  X11 libraries may be linked dynamically as these
	  are not used by the bootstrap compilation.
	* On yet others, all libs must be statically linked :-(

  You specify this using proper LDFLAGS and proper specification of the
  libraries.  Some ld's


    XPCE/SICStus Prolog (make target `xpce-sicstus'):
    -------------------------------------------------

	# SICSHOME
	Absolute path to the installation directory of SICS Prolog
	(Version 2.1#9 or later).


Compilation:
============

* After editing Makefile, give the following command to create
  XPCE/SWI-Prolog in bin/xpce.
  
	% make clean; make

  where `make' MUST BE GNU-MAKE!!!!

  This is what the *start* of the compilation should look like
  (on a SUN sparc workstation running Solaris 2.3, using gcc 2.5.8
  and gnu-make 3.71):

  ================================================================
  % cd ~/src/xpce-4.8/
  % make
  cd src; make  WST=x11 xpcelib
  make[1]: Entering directory `/lri2/jan/src/xpce-4.8/src'
  gcc -Wall -O2 -I.. -funsigned-char -I. -o Names.Gen Names.Gen.c
  gcc -Wall -O2 -I.. -funsigned-char -I. -o Names.X Names.X.c
  if [ ! -d names ]; then mkdir names; fi
  ./FN -a h/*.h ???/*.c
  make[2]: Entering directory `/lri2/jan/src/xpce-4.8/src/adt'
  gcc -Wall -O2 -I.. -funsigned-char   -c area.c -o area.o
  gcc -Wall -O2 -I.. -funsigned-char   -c atable.c -o atable.o
  ...
  ...
  ================================================================

* If you just want XPCE.a, use the target `make xpce' instead of just
  `make', which is equivalent to `make xpce-pl'

* If you want XPCE connected to SICStus Prolog, you need SICStus Prolog
  version 2.1#9 (tested) or later.  Edit the Makefile variables
  SICSHOME and type

	% make xpce-sicstus

* NEVER run make in one of the subdirectories; the toplevel make exports
  necessary context to the sub-makes.

* To REBUILD ALL, you need the utilities `mkproto' and `etags'.  If you
  don't have mkproto (for generating the proto.h files), you can ftp
  this public domain utility from swi.psy.uva.nl/pub/xpce/mkproto.tgz.

  etags is the GBU-Emacs tag-generation program distributed with
  GNU-Emacs and available from many ftp-sites.

  If you have these programs, you can do:

	% make realclean
	% make

  to regenerate all files that are automatically generated.


Public Installation 
===================

You may make the system public by   creating  links from a public binary
directory to the executables in the bin subdirectory.  If you decide for
this option, you are must make this directory world-readable.  According
to the `Non Disclosure'  term  in   the  licence  agreement,  you should
protect the `src'  directory  to  be   read-only  for  all  users except
maintenance personnel.

Alternatively, when using SWI-Prolog, you may run

	% make install-pl

which will copy the runtime   files  to /usr/local/lib/xpce-$version and
install a public executable /usr/local/bin/xpce-$version.  After command
you may discard the distribution directory.


Overview of the compilation process
===================================

To help you understand where to look if  anything goes wrong, below is a
short overview of the compilation process:

    XPCE.a
    ------

	1) Establish a link from src/md.h to src/md/md-$(ARCH).h to get
	a description of the machine.

	2) Build a table for C-code used XPCE atoms.  This compiles
	Names.Gen.c and Names.X.c and next runs the shell-script src/FN
	to create a database in the directory `src/names' and C-files in
	`src/h/names.ic' and `src/h/names.ih'.

	3) make is fired in each of the directories below src with
	the target `addlib'.  This will make the object files of the
	module and next run `ar ru ../XPCE.a <object files> to add/update
	the main XPCE library.

	4) a change of XPCE.a is detected and ranlib(1) is ran if XPCE.a
	has changed and ranlib can be found in /bin or /usr/bin.

    XPCE/SWI-Prolog
    ---------------

	1) make is fired in pl/src to create interface.o and link.o.  The
	first is the interface and the second a table to register the
	interface as Prolog predicates.

	2) Next, $(CC) is used to link $(PLBASE)/runtime/$(PLARCH)/pl.o
	with the created .o files, src/XPCE.a and the necessary Unix
	libraries to create pl/src/xpce.base; the basic Unix executable.

	3) For C++, `mangle' is make'ed from mangle.c and the symbols
	mentioned in pl/src/mlist are changed in xpce.base to some
	unique meaningless name.

	4) Next, the shell script pl/src/dump is started, which starts
	pl/src/xpce.base, loads all Prolog files from XPCE/Prolog and
	finally dumps a Prolog saved-state into bin/xpce.

    XPCE/SICStus Prolog
    -------------------

	This installation process is very similar to XPCE/SWI-Prolog.

Problems:
=========

* If anything goes wrong while building XPCE.a:

	- Check the paths: PCEHOME, XBASE, ARCH

	- Are you running the proper programs:
	
		% make -v
		GNU Make version 3.71, by Richard Stallman and Roland McGrath.
		...
		% gcc -v
		Reading specs from /usr/local/lib/gcc-lib/sparc-sun-sunos4.1/2.5.8/specs
		gcc version 2.5.8

	- Any local overrules of include files, libraries, shell utilities?
	  XPCE should built using both native Unix and GNU-Project utilities,
	  except for make and (g)cc that should be the GNU versions.


