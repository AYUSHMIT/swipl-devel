\libdoc{clp/clp_distinct}{Weak arc consistent `all_distinct' constraint}
\label{sec:lib:clpdistinct}

\makebox[\linewidth]{\hfill Author: \emph{Markus Triska}}

\noindent
The \pllib{clp/clp_distinct} module provides the following constraints:

\begin{description}
	\predicate{all_distinct}{1}{+Vars}
		The variables in \arg{Vars} are constrained to be pairwise
		distinct. All variables must already be assigned domains
		(via vars_in/2 or vars_in/3) when this constraint is posted.

	\predicate{vars_in}{2}{+Vars, +Domain}
		Where \arg{Vars} is a list of variables and \arg{Domain} is
		a list of non-negative integers. Each variable of \arg{Vars}
		is constrained to be in \arg{Domain}.

	\predicate{vars_in}{3}{+Vars, +From, +To}
		Where \arg{Vars} is a list of variables, and $0\le From \le To$.
		Each variable in \arg{Vars} is constrained to be in the
		discrete interval [From,To].
		
\end{description}

\subsection{Example 1}
The all_distinct/1 constraint can detect various inconsistencies:
\begin{code}
?- vars_in([X,Y,Z], [1,2]), all_distinct([X,Y,Z]).

No
\end{code}

\subsection{Example 2}
In this example, 3 is assigned to~$Z$ without labeling any variables:
\begin{code}
?- vars_in([X,Y], [1,2]), vars_in([Z], [1,2,3]), all_distinct([X,Y,Z]).

X = _G180{1-2}
Y = _G183{1-2}
Z = 3 ;
\end{code}

\subsection{Example 3}
The clp_distinct module can be used in conjunction with clp/bounds.
All relevant variables must still be assigned domains via one of the
\emph{vars_in} predicates before all_distinct/1 can be posted:

\begin{code}
:- use_module(library(bounds)).
:- use_module(library(clp_distinct)).

?- [X,Y] in 1..2, vars_in([X,Y], [1,2]), all_distinct([X,Y]), label([X,Y]).

X = 1
Y = 2 ;

X = 2
Y = 1 ;
\end{code}

%end-of-file
