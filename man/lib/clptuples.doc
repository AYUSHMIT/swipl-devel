\libdoc{clp/clp_tuples}{Symbolic constraints on tuples}
\label{sec:lib:clptuples}

\makebox[\linewidth]{\hfill Author: \emph{Markus Triska}}

\noindent
The \pllib{clp/clp_tuples} module provides the following constraints:

\begin{description}
	\predicate{tuples_in}{2}{+Tuples, +Extension}
		Equivalent to tuples_in(Tuples, Extension, []).

	\predicate{tuples_in}{3}{+Tuples, +Extension, +Options}
		Where \arg{Tuples} is a list of tuples (lists) of variables
		and integers, each of length~$N$, \arg{Extension} is a list
		of tuples of integers, each of length~$N$, and \arg{Options}
		is a list of options that influence the	propagation strategy.
		Each tuple of \arg{Tuples} is constrained to be in the
		relation generated by \arg{Extension}.
\arg{Options} is a list containing any number of the following
flags:

\begin{description}
\termitem{propagate}{full}
	Enforce maximum initial domain propagation on each tuple variable.
	By default, a heuristics is used instead.
\termitem{subscribe}{bounds}
	Wake up and propagate on notifications by \pllib{clp/bounds},
	for example, when an additional	arithmetic constraint is posted on
	a tuple variable. By default, the constraint only propagates when a
	tuple variable is unified with a non-var term.
\end{description}
\end{description}

\subsection{Example}

A train schedule is represented as a list~$Ts$ of quadruples, denoting
departure and arrival places and times for each train. The \emph{path/3}
predicate given below constrains~$Ps$ to a feasible journey from~$A$ to~$D$
via 3~trains that are part of the given schedule.

\begin{code}
:- use_module(library(bounds)).
:- use_module(clp_tuples).

schedule(Ts) :-
	Ts = [[1,2,0,1],[2,3,4,5],[2,3,0,1],[3,4,5,6],[3,4,2,3],[3,4,8,9]].

path(A, D, Ps) :-
	schedule(Ts),
	Ps = [[A,B,_T0,T1],[B,C,T2,T3],[C,D,T4,_T5]],
	tuples_in(Ps, Ts),
	T2 #> T1,
	T4 #> T3.
\end{code}

An example query:

\begin{code}
?- path(1, 4, Ps), flatten(Ps, Vars), label(Vars).

Ps = [[1, 2, 0, 1], [2, 3, 4, 5], [3, 4, 8, 9]]
\end{code}

\subsection{Compatibility}

This constraint is known by the name table/2 in SICStus Prolog and
fd_relation/2 in GNU-Prolog.

%end-of-file
