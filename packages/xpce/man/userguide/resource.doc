\chapter{Using resources}		\label{sec:resources}


With the term {\em resources} we actually refer to {\em preferences}
similar to X11. Resources in XPCE act like class-variables for which a
default is specified by the application programmer. The application may
overrule this default by specifying its value in a \idx{resource-file}.

The X11 version of XPCE uses the X11 resource services to find the value
for a resource. The Win32 version uses its own resource parser that
emulates the X11 resource-parsers behaviour. Resources are read from the
following locations.

\begin{enumerate}
    \tick{The X11 server}
Resources associated with this screen using \idx{xrdb(1)} overrule
resources defined in any of the other locations.  Note that this
location is not provided for the Win32 emulator.
    \tick{The \$HOME/.Xdefaults Resource file}
This file contains user preferences that should overrule the
XPCE default values.
    \tick{The \$PCEHOME/Pce Resource file}
This file is used for system configuration.  It defines the basic
look-and feel of XPCE.  Multiple versions of this file are distributed
with XPCE, allowing a site to choose its preferred look-and-feel.
    \tick{The application}
The values stored in the application are the last location used to
resolve a resource value.
\end{enumerate}


\section{Specifying xpce resources}

XPCE is known by the X11 application {\tt Pce}.  An XPCE resource
specification takes the following form:

\begin{quote}
{\tt Pce.}<CapitalisedClass>{\tt .}<attribute>{\tt :} <Value>
\end{quote}

<CapitalisedClass> denotes a capitalised version of the class-name, were
underscores are deleted and the subsequent letter is capitalised. For
example, {\em Point}, {\em ListBrowser}. <attribute> denotes the
`class-variable' specified. The online manual ClassBrowser may be used
to examine the available resources and their current value.

The resource-class {\tt Pce} can be changed using
`display ->resource_class'.


\section{Resource-value syntax}

The syntax for resource-{\em values} used by XPCE is in general not the
same as the syntax used by X11.   Exceptions are integer, boolean and
colour resources.  Resource values are specified as XPCE objects.  The
syntax is inspired by Prolog.  Below is a partial BNF description.

\def\isa{}
\def\ora{}
\renewcommand{\isa}{&    ::= &}
\renewcommand{\ora}{& $\mid$ &}
\begin{quote}
\begin{tabular}{|lrl|}
\hline
<Any>			\isa <int>		\\
			\ora <float>		\\
			\ora <Name>		\\
			\ora @<Name>		\\
			\ora <Chain>		\\
			\ora <Object>		\\
\hline
<Chain>			\isa {\tt [} <Any> \{, <Any>\} {\tt ]} \\
			\ora {\tt [} {<Blank>} {\tt ]} \\
\hline
<Object>		\isa <ClassName>{\tt ()} \\
			\ora <ClassName>{\tt (} <Any> \{, <Any>\} {\tt )} \\
			\ora <PrefixOp> <Any> \\
			\ora <Any> <InfixOp> <Any> \\
			\ora <Any> <PostfixOp> \\
			\ora {\tt "} <String> {\tt "} \\
\hline
<String>		\isa \{<CharNotDoubleQuote>$|${\tt ""}\} \\
\hline
<Name>			\isa <Letter>\{<Letter>$|$<Digit>\} \\
			\ora {\tt '} \{<CharNotSingleQuote>$|${\tt ''}\} {\tt '} \\
\hline
\end{tabular}
\end{quote}

Summarising, the syntax is the same as for Prolog.  All classes that can
be specified using Prolog operators can be specified the same way, but
as XPCE's parser is independent of Prolog, Prolog op/3 directives do not
influence XPCE.  XPCE has no variables, thus {\tt Fred} refers to the
name {\em Fred} rather then defining a variable.  If an instance has
to be created without arguments, such as and empty \class{chain} object,
this is specified as {\tt chain()} rather than {\tt new(chain)}.  The
latter will try to make an instance of class \noclass{new} (and fail).


\subsection{Long lines in resource files}

X11 allows resource values that do not fit on a single line to be
continued on the next line if the newline is {\em immediately}
preceded by a backslash.


\section{Resources and inheritance}

Resources are inherited by subclasses.  If a resource value needs to be
obtained, XPCE will first check for the resource value given the current
class.  If this cannot be found, it will continue with the super-class,
etc.  If no value can be obtained for any of these classes, the default
value stored in the resource object will be used.  This implies that
the statement

\begin{code}
Pce.Text.font:	normal
\end{code}

also applies for all subclasses of class text, unless the subclass
explicitly defines a new font resource.%
    \footnote{If the resource-file specifies {\tt Pce.*.font: normal},
	      its value will apply for all classes defining a font
	      resource due to the way the X11 resource handler is
	      defined.  The X11 resource handler will use the most
	      specific specification.}


\section{Obtaining resource settings}

Obtaining resources is normally restricted to user-defined classes
(\chapref{udc}).

\begin{description}
    \predicate{default}{3}{+Arg, resource(+Obj, +Name), -Value}
This predicate is described in \secref{udcpreds}.
    \getmethod{object}{resource_value}{name}{value}
Get the value of the named resource.  Fails if the resource does
not exist or cannot be converted.
    \sendmethod{object}{obtain_resources}{}
Exclusively in the context of user-defined classes.  This method
obtains the resource value for any slot with value @default, whose
type declaration does not accept @default.
\end{description}
