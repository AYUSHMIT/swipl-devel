				Compiling XPCE
				Jan Wielemaker
				   14/02/96

Updated for xpce-4.8.16 at Wed Feb 14 14:08:28 1996

Prerequisites:
==============

* A source LICENCE agreement!

* A supported Unix machine with a supported operating system.  Most Unix
  X11 brands will do.  Configure does the proper job for SunOs 4.1.x,
  Solaris, Linux/ELF and probably IRIX 5.3.  It will do most of the
  work for you on other platforms, but notably the details for making
  shared libraries might need to be fixed in the resulting Makefile.

* X11 include and library files.  X11R4 to R6 should configure properly.
  R3 might be a problem, at least it is not tested for a while.

* A recent copy of the GNU-Project C-compiler gcc.  Versions known to
  work are gcc-2.x.y, where 3<=x<=5 and y>x, gcc 2.6.3 and gcc 2.7.x.
  Some others are fine too. The C++ interface is written in C++ and
  therefore you need to have g++ installed too to include this
  (configure is clever enough to omit the C++ interface if you do
  not have g++).

* A recent copy of the GNU-Project `make' utility.  Versions tested are
  3.62 and 3.71 and 3.74.  Most versions will do.  The native make
  utility provided with many operating systems won't.

* If you want to link to SWI-Prolog to create XPCE/SWI-Prolog, SWI-Prolog
  version 2.5.2 or later must be installed (using make install) as
  one of `pl', `swipl' or `swi-prolog'. The automatic configuration
  script will call SWI-Prolog to determine system parameters of it.

* If you want to link to SICStus Prolog, you need SICStus Prolog
  version 3 installed.


Preparation:
============

You can either compile  in  the  source   directory,  or  in  a separate
directory. We advice the latter, as  it   makes  it more easy to compile
multiple versions from the same sources   (for  example both the runtime
and the development version or versions for different hardware).  In the
first case simply

	% cd src

in the latter case, invent a nice directory name and do (for example):

	% mkdir sunos
	% cd sunos

* Run configure. 

	% sh ../src/configure

  If you do not want to install XPCE with SWI-Prolog, but with
  SICStus or another language you should do

	% sh ../src/configure --without-pl

  configure creates config.h, describing many aspects of your compiler
  and C-libraries as well as Makefile.  Check them if you know your
  compilation environment and your machine is not listed above.

* Make the XPCE library

	% make xpce

  Time for a coffee break now.  This stage creates libXPCE.a in the
  current directory.

* Make a shared library

  Notably if you are planning to use the XPCE/C++ interface, it is wise
  to create a shared version of these libraries. Note that this will not
  work on all platforms.

  	% make so

  Will create libXPCE.so.<version> and libXPCEmain.a.  The first is
  the shared library used for both C++ and the Prolog versions, the
  latter is the C++ main-stub library.  Now, become root and run

	% su
	# make so-install

  To install these libraries in /usr/local/lib.  If you prefer another
  location, edit the Makefile variable prefix or do (for example) the
  following to install in /usr/lib:

  	% su
	# make prefix=/usr so-install

* Link to SWI-Prolog
====================

  There are two ways to link to SWI-Prolog: create a shared object
  containing the interface, so XPCE can be loaded as a library on
  top of SWI-Prolog.  This is the default if shared objects are
  supported.  Otherwise, the interface can be linked into a new
  version of SWI-Prolog.  The make targets are:

  	% make pl-itf
	Uses the default, which implies create a library if possible
	or a new Prolog if unavoidable.

	% make pl-so
	Makes a library.  This will fail if it can't be done on this
	platform.

	% make pl-static
	Makes a new SWI-Prolog

* Testing the shared object version

  Now simply start pl and do XPCE calls, for example:

  	% pl
	?- manpce.

  This is dynamically load XPCE and start the manual.

* Testing the `new prolog' version

	% ./xpce
	?- manpce.

* Installation

  To install the development system inside the Prolog distribution, run:

  	% make dv-install

  Note that this installs a *lot*.  If configure didn't find a matching
  `install' executable, it will use the shell script install-sh and the
  installation will take *long*.  If you have to do this more often, 
  consider installing GNU install on your system.


Link to SICStus Prolog
======================

See README.sicstus for further details.

Overview of the compilation process
===================================

To help you understand where to look if  anything goes wrong, below is a
short overview of the compilation process:

    libXPCE.a
    ---------

	1) Build a table for C-code used XPCE atoms.  This compiles
	Names.Gen.c and Names.X.c and next runs the shell-script src/FN
	to create a database in the directory `src/names' and C-files in
	`src/h/names.ic' and `src/h/names.ih'.

	2) Compiles the files for libXPCE.a and puts them in the library.
	This uses GNU-extensions to make and is one of the reasons why you
	need GNU-make.

	3) a change of XPCE.a is detected and ranlib(1) is ran if XPCE.a
	has changed and ranlib is detected by configure

    XPCE/SWI-Prolog
    ---------------

        * Shared Library Version 

	1) make is fired in pl/src using the target `soall'

	2) This make creates so-interface.o, the interface object. This
	object is very similar to the normal interface, but contains the
	functions install() and uninstall() rather than using the link.c
	stub to make the entry-point known.

	3) ld is used to create pl2xpce.so

	4) The SWI-Prolog installation directory is modified.  plrc
	is copied to this directory and a link named `xpce' is made
	from SWI-Prolog's home directory to XPCE.
	
	5) The new system is ran to create .qlf files for various
	XPCE libraries.

	* Statically linked version

	1) make is fired in pl/src to create interface.o and link.o.  The
	first is the interface and the second a table to register the
	interface as Prolog predicates.

	2) Next, $(CC) is used to link $(PLBASE)/runtime/$(PLARCH)/pl.o
	with the created .o files, src/XPCE.a and the necessary Unix
	libraries to create pl/src/xpce.base; the basic Unix executable.

	3) Next, xpce -O -g pce_welcome -b $(PLHOME)/boot/init.pl -c
	load.pl is started to create the xpce.qlf boot image.


Problems:
=========

* If anything goes wrong while building XPCE.a:

	- Are you running the proper programs:
	
		% make -v
		GNU Make version 3.71, by Richard Stallman and Roland McGrath.
		...
		% gcc -v
		Reading specs from
		/usr/local/lib/gcc-lib/sparc-sun-sunos4.1/2.5.8/specs
		gcc version 2.5.8

	- Any locally overruled include files, libraries, shell
	  utilities? XPCE should build using both native Unix and
	  GNU-Project utilities, except for make and (g)cc that should be
	  the GNU versions.


