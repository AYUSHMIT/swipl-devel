#!/bin/bash

# Compiling SWI-Prolog using MinGW
# --------------------------------
#
# Below are some notes from Roberto Bagnara  to compile a static version
# of SWI-Prolog using the  MinGW  cross-compiler   on  a  Linux  system.
# Roberto submitted patches to  5.11.22  and   5.11.23  to  get the core
# Prolog system compiled using MinGW.
#
# Ideally, it should be  possible  to   compile  the  entire suite using
# MinGW, either natively on  Windows  or   cross-compile  it  from e.g.,
# Linux. Using MinGW would eliminate the need   to  maintain two sets of
# Makefiles  and  achieves  a  much  more  lightweight  and  truly  free
# development toolchain for SWI-Prolog on Windows.   What  remains to be
# done is:
#
#     - Make more packages portable.  Most of the work is similar as for
#       the kernel: identify the places where the __WINDOWS__ preprocessor
#       symbol is used for MSVC rather than Windows and replace this by
#       _MSC_VER and/or __MINGW32__.

# USAGE
#
# The remainder of the  file  is   an  executable  specification  of the
# installation process. To use it, copy this   file to a directory above
# the location where you want to   build all components. I.e., typically
# the directory above this one and source it into the bash shell:
#
#   % . README.mingw
#
# Next, execute the functions for the parts of the process you want. The
# function build_all does everything.
#
# This script has been tested for   cross-compilation  on a Linux system
# with the mingw cross-compiler and wine installed.

install=${install-$HOME/mingw}
export BUILDARCH=mingw		# build in mingw directory next to src
export JAVAPREFIX="$HOME/.wine/drive_c/Program Files/Java/jdk1.7.0_05/jre/bin"
src=$(pwd)

case $(uname) in
    MINGW*)
	export PATH=$install/bin:$PATH
	;;
    *)
	export WINEPATH="$(winepath -w $install/bin)"
	;;
esac

GMP_VERSION=5.0.5
PTHREADS_VERSION=2-9-1-release
SSL_VERSION=1.0.1c
JPEG_VERSION=8d
ZLIB_VERSION=1.2.5
ARCHIVE_VERSION=3.0.4

if [ -z "$CROSS" ]; then
  if [ -r /usr/bin/i686-w64-mingw32-gcc ]; then
    CROSS=i686-w64-mingw32
  else
    CROSS=i586-mingw32msvc
  fi
fi


################
# Create target directories

make_mingw_dirs()
{ mkdir -p $install/include
  mkdir -p $install/lib
  mkdir -p $install/bin
}


###########################
# Download and install the GMP library.

download_gmp()
{ GMP_FILE=gmp-$GMP_VERSION.tar.bz2

  [ -f $GMP_FILE ] || \
    wget ftp://ftp.gmplib.org/pub/gmp-$GMP_VERSION/$GMP_FILE
  tar jxf $GMP_FILE
}

build_gmp()
{ ( cd gmp-$GMP_VERSION
    ./configure --host=$CROSS --prefix=$install \
       --enable-shared --disable-static
    make
    make install
  )
}

###########################
# Download and install the Pthreads-win32 library.

download_pthread_win32()
{ PTHREADS_FILE=pthreads-w32-$PTHREADS_VERSION.tar.gz

  cd $src
  [ -f $PTHREADS_FILE ] || \
    wget ftp://sourceware.org/pub/pthreads-win32/$PTHREADS_FILE

  tar xzf $PTHREADS_FILE
}

build_pthread_win32()
{ ( cd pthreads-w32-$PTHREADS_VERSION
    make -f GNUmakefile CROSS=$CROSS- \
        LFLAGS="-lwsock32 -Wl,--out-implib=libpthreadGC2.dll.a" GC
    cp pthread.h semaphore.h sched.h $install/include/
    cp pthreadGC2.dll $install/bin/
    cp libpthreadGC2.dll.a $install/lib/
  )
}

###########################
# Download and install ssl

download_ssl()
{ SSL_FILE=openssl-$SSL_VERSION.tar.gz
  [ -f $SSL_FILE ] || wget http://www.openssl.org/source/$SSL_FILE
  tar xzf $SSL_FILE
}

build_ssl()
{ ( cd openssl-$SSL_VERSION
    export CC=$CROSS-gcc
    ./Configure mingw --prefix=$install shared threads
    make CROSS_COMPILE=$CROSS- depend
    make CROSS_COMPILE=$CROSS-
    make CROSS_COMPILE=$CROSS- install
  )
}

###########################
# Download and install jpeg

download_jpeg()
{ JPEG_FILE=jpegsrc.v$JPEG_VERSION.tar.gz

  [ -f $JPEG_FILE ] || wget http://www.ijg.org/files/$JPEG_FILE
  tar xzf $JPEG_FILE
}

build_jpeg()
{ ( cd jpeg-$JPEG_VERSION
    ./configure --host=$CROSS --prefix=$install --enable-shared
    make
    make install
  )
}

###########################
# Download and install libXpm

download_libxpm()
{ if [ -d libXpm ]; then
     (cd libXpm && git pull)
  else
     git clone git://www.swi-prolog.org/home/pl/git/misc/libXpm.git
  fi
}

build_libxpm()
{ ( cd libXpm/lib
    autoconf
    ./configure --host=$CROSS --prefix=$install
    make -f Makefile.mingw
    make -f Makefile.mingw install
  )
}

###########################
# Download and install zlib

download_zlib()
{ ZLIB_FILE=zlib-$ZLIB_VERSION.tar.bz2

  [ -f $ZLIB_FILE ] || \
    wget http://garr.dl.sourceforge.net/project/libpng/zlib/$ZLIB_VERSION/$ZLIB_FILE
  tar xjf $ZLIB_FILE
}

build_zlib()
{ ( cd zlib-$ZLIB_VERSION
    make -f win32/Makefile.gcc PREFIX=$CROSS- BINARY_PATH=$install/bin INCLUDE_PATH=$install/include LIBRARY_PATH=$install/lib SHARED_MODE=1 install
  )
}

#################################
# Download and install libarchive

download_libarchive()
{ ARCHIVE_FILE=libarchive-$ARCHIVE_VERSION.tar.gz

  [ -f $ARCHIVE_FILE ] || \
    wget https://github.com/downloads/libarchive/libarchive/$ARCHIVE_FILE
  tar xzf $ARCHIVE_FILE
}

build_libarchive()
{ ( cd libarchive-$ARCHIVE_VERSION
    ./configure --host=$CROSS --prefix=$install --with-pic \
    --without-iconv --without-openssl --without-nettle --without-xml2 \
    --without-expat --without-libregex --without-bz2lib
    make
    make install
  )
}



###########################
# Do the whole lot for all prerequisites

download_prerequisites()
{ download_gmp
  download_pthread_win32
  download_ssl
  download_jpeg
  download_libxpm
  download_zlib
  download_libarchive
}

build_prerequisites()
{ build_gmp
  build_pthread_win32
  build_ssl
  build_jpeg
  build_libxpm
  build_zlib
}

###########################
# Download and unpack a SWI-Prolog source distribution.

download_swipl()
{ if [ ! -d pl-devel ]; then
    git clone git://www.swi-prolog.org/home/pl/git/pl-devel.git
  fi

  ( cd pl-devel
    git pull
    ./prepare --yes
  )
}

build_swipl_core()
{ export CIFLAGS="-I$install/include"
  export LDFLAGS="-L$install/lib"
  ( cd pl-devel
    ./configure --host=$CROSS --prefix=$install \
        --disable-readline --disable-libdirversion --enable-shared
    make
    make install
  )
}

copy_dlls()
{ cp $install/bin/*.dll $install/swipl/bin
}


# Usage: build_swipl_packages [pkg ...]

build_swipl_packages()
{ ( cd pl-devel/packages
    export CPPFLAGS=-I$install/include
    export PKGLDFLAGS=-I$install/lib
    [ -z "$1" ] || export PKG="$1"
    ./configure --host=$CROSS --prefix=$install
    make
    make install
    make html-install
  )
}

build_swipl()
{ build_swipl_core
  copy_dlls
  build_swipl_packages
}

###########################
# Do the whole lot

build_all()
{ make_mingw_dirs
  build_prerequisites
  build_swipl
}
