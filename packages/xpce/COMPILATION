				Compiling XPCE
				Jan Wielemaker
				   01/11/94

Updated for xpce-4.8.9 at Tue Apr 25 22:25:48 1995

Prerequisites:
==============

* A source LICENCE agreement!

* A supported Unix machine with a supported operating system.

* A recent copy of the GNU-Project C-compiler gcc.  Versions known to
  work are gcc-2.x.y, where 3<=x<=5 and y>x or gcc 2.6.3. Some others
  are fine too. The C++ interface is written in C++ and therefore you
  need to have g++ installed too to include this (./configure is clever
  enough to omit the C++ interface if you have g++ not installed).

* A recent copy of the GNU-Project `make' utility.  Versions tested are
  3.62 and 3.71.  Most versions will do.  The native make utility provided
  with many operating systems won't.

* If you want to link to SWI-Prolog to create XPCE/SWI-Prolog, SWI-Prolog
  version 2.0.8 or later must be installed (using make install) as one
  of `pl', `swipl' or `swi-prolog'. The automatic configuration script
  will call SWI-Prolog to determine system parameters of it.


Preparation:
============

* Run ./configure.  On some systems this requires

	% sh configure

  If you do not want to install XPCE with SWI-Prolog, you should do

	% sh configure --without-pl

  configure creates config.h, describing many aspects of your compiler
  and C-libraries.

  When configuring for linking to SWI-Prolog, configure will also
  determine which of the two linking schemas is used:

     * Shared library based

     If it detects the SWI-Prolog feature `open_shared_object' it
     assumes SWI-Prolog can dynamically load shared object files
     (extension .so on sysvr4 Unix systems) and will try to make
     the target pl/<plarch>/xpce4pl.<so>, where <plarch> is the
     value of the `arch' feature of SWI-Prolog and <so> is the
     extension used for shared objects on this Unix platform.

     In addition, it will target a couple of `.qlf' (SWI-Prolog
     Quick Load Files) that allow for quick dynamic loading of
     xpce in the plain SWI-Prolog executable.

     The target for pl/src/Makefile is `soall'

     * Statically linked version
     
     If SWI-Prolog cannot load shared objects, configure will set
     up the target pl/src/xpce, a statically linked SWI-Prolog
     version that includes XPCE.  NOTE: `statically linked' here
     is the opposite of dynamic linking of shared objects in the
     running executable.  It does *not* necessarily mean using
     static C libraries.

     It will also create the target pl/src/xpce.qlf, a Prolog boot
     image containing the normal Prolog boot files as well as the
     XPCE kernel files.

     The target for pl/src/Makefile is `nosoall'

  Note that, unlike previous versions, XPCE/SWI-Prolog is no longer
  created using SWI-Prolog's save_program/1 predicate.  The current
  schema is portable to machines not supporting save_program/1 and
  in general exploits more of dynamic linking and libraries.


XPCE/SICStus Prolog (make target `xpce-sicstus'):
-------------------------------------------------

[ Unfortunately version 4.8.9 is not updated for SICStus Prolog.  It
  is likely *not* to run without modifications.  Our SICStus market
  is very small, so please contact me if you have troubles/plans.
]

Either first install using SWI-Prolog, or configure using:

	% ./configure --without-pl

edit the Makefile to fix the definition of:

	# SICSHOME
	Absolute path to the installation directory of SICS Prolog
	(Version 2.1#9 or later).

	# SICSTARGET
	Place where the binary should be dumped

Compilation:
============

* After editing Makefile, give the following command to create the
  XPCE/SWI-Prolog target:
  
	% make clean; make

  where `make' MUST BE GNU-MAKE!!!!

  This is what the *start* of the compilation should look like
  (on a SUN sparc workstation running Solaris 2.4, using gcc 2.5.8
  and gnu-make 3.71):

  ================================================================
  cd ~/src/xpce-4.8.4/
  make
  ****************
  Making XPCE 4.8.4, Nov 1994 for sparc-solaris2.4
  ****************
  sed "s/\<Pce\./Pce./" Pce.in > Pce
  cd src; make  WST=x11 xpcelib
  make[1]: Entering directory `/lri2/jan/src/xpce-4.8.4/src'
  gcc -Wall -O2 -I.. -fPIC -funsigned-char -DHAVE_CONFIG_H -I. -o Names.Gen Names.Gen.c
  gcc -Wall -O2 -I.. -fPIC -funsigned-char -DHAVE_CONFIG_H -I. -o Names.X Names.X.c
  if [ ! -d names ]; then mkdir names; fi
  ./FN -a h/*.h ???/*.c
  make[2]: Entering directory `/lri2/jan/src/xpce-4.8.4/src/adt'
  gcc -Wall -O2 -I.. -fPIC -funsigned-char -DHAVE_CONFIG_H   -c area.c -o area.o
  gcc -Wall -O2 -I.. -fPIC -funsigned-char -DHAVE_CONFIG_H   -c atable.c -o atable.o
  ...
  ================================================================

* If you just want XPCE.a, use the target `make xpce' instead of just
  `make', which is equivalent to `make xpce-pl'.  NOTE: if you ran configure
  with the option `--without-pl', the default target is just `xpce'.

* If you want XPCE connected to SICStus Prolog, you need SICStus Prolog
  version 2.1#9 (tested) or later.  Edit the Makefile variables
  SICSHOME and type

	% make xpce-sicstus

* NEVER run make in one of the subdirectories; the toplevel make exports
  necessary context to the sub-makes.

* To REBUILD ALL, you need the utilities `mkproto' and `etags'.  If you
  don't have mkproto (for generating the proto.h files), you can ftp
  this public domain utility from

	ftp://swi.psy.uva.nl/pub/xpce/mkproto.tgz.

  etags is the GNU-Emacs tag-generation program distributed with
  GNU-Emacs and available from many ftp-sites.

  If you have these programs, you can do:

	% make distclean
	% make


Public Installation 
===================

You may make the system public by   creating  links from a public binary
directory to the executables in the bin subdirectory.  If you decide for
this option, you are must make this directory world-readable.  According
to the `Non Disclosure'  term  in   the  licence  agreement,  you should
protect the `src'  directory  to  be   read-only  for  all  users except
maintenance personnel.

Alternatively, when using SWI-Prolog, you may run

	% make install-pl

which will copy the runtime   files  to /usr/local/lib/xpce-$version and
install a public executable /usr/local/bin/xpce-$version.  After command
you may discard the distribution directory.


Overview of the compilation process
===================================

To help you understand where to look if  anything goes wrong, below is a
short overview of the compilation process:

    XPCE.a
    ------

	1) Build a table for C-code used XPCE atoms.  This compiles
	Names.Gen.c and Names.X.c and next runs the shell-script src/FN
	to create a database in the directory `src/names' and C-files in
	`src/h/names.ic' and `src/h/names.ih'.

	2) make is fired in each of the directories below src with
	the target `addlib'.  This will make the object files of the
	module and next run `ar ru ../XPCE.a <object files> to add/update
	the main XPCE library.

	5) a change of XPCE.a is detected and ranlib(1) is ran if XPCE.a
	has changed and ranlib is detected by configure

    XPCE/SWI-Prolog
    ---------------

        * Shared Library Version 

	1) make is fired in pl/src using the target `soall'

	2) This make creates shitf.o, the interface object. This object
	is very similar to the normal interface, but contains the
	functions install() and uninstall() rather than using the link.c
	stub to make the entry-point known.

	3) ld is used to create xpce4pl.so

	4) ../$(PLARCH) is created to hold xpce4pl.so and pl-crt0.o

	5) The SWI-Prolog installation directory is modified.  plrc
	is copied to this directory and a link named `xpce' is made
	from SWI-Prolog's home directory to XPCE.
	
	6) The new system is ran to create .qlf files for various
	XPCE libraries.

	* Statically linked version

	1) make is fired in pl/src to create interface.o and link.o.  The
	first is the interface and the second a table to register the
	interface as Prolog predicates.

	2) Next, $(CC) is used to link $(PLBASE)/runtime/$(PLARCH)/pl.o
	with the created .o files, src/XPCE.a and the necessary Unix
	libraries to create pl/src/xpce.base; the basic Unix executable.

	3) For C++, `mangle' is make'ed from mangle.c and the symbols
	mentioned in pl/src/mlist are changed in xpce.base to some
	unique meaningless name.

	4) Next, xpce -O -g pce_welcome -b $(PLHOME)/boot/init.pl -c
	load.pl is started to create the xpce.qlf boot image.


    XPCE/SICStus Prolog
    -------------------

	This installation process is very similar to XPCE/SWI-Prolog.

Problems:
=========

* If anything goes wrong while building XPCE.a:

	- Check the paths: PCEHOME, XBASE, ARCH

	- Are you running the proper programs:
	
		% make -v
		GNU Make version 3.71, by Richard Stallman and Roland McGrath.
		...
		% gcc -v
		Reading specs from
		/usr/local/lib/gcc-lib/sparc-sun-sunos4.1/2.5.8/specs
		gcc version 2.5.8

	- Any local overrules of include files, libraries, shell utilities?
	  XPCE should build using both native Unix and GNU-Project utilities,
	  except for make and (g)cc that should be the GNU versions.


