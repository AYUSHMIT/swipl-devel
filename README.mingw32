#!/bin/bash

# Compiling SWI-Prolog using MinGW
# --------------------------------
#
# Below are some notes from Roberto Bagnara  to compile a static version
# of SWI-Prolog using the  MinGW  cross-compiler   on  a  Linux  system.
# Roberto submitted patches to  5.11.22  and   5.11.23  to  get the core
# Prolog system compiled using MinGW.
#
# Ideally, it should be  possible  to   compile  the  entire suite using
# MinGW, either natively on  Windows  or   cross-compile  it  from e.g.,
# Linux. Using MinGW would eliminate the need   to  maintain two sets of
# Makefiles  and  achieves  a  much  more  lightweight  and  truly  free
# development toolchain for SWI-Prolog on Windows.   What  remains to be
# done is:
#
#     - Make more packages portable.  Most of the work is similar as for
#       the kernel: identify the places where the __WINDOWS__ preprocessor
#       symbol is used for MSVC rather than Windows and replace this by
#       _MSC_VER and/or __MINGW32__.

# USAGE
#
# The remainder of the  file  is   an  executable  specification  of the
# installation process. To use it, copy this   file to a directory above
# the location where you want to   build all components. I.e., typically
# the directory above this one and source it into the bash shell:
#
#   % . README.mingw
#
# Next, execute the functions for the parts of the process you want. The
# function build_all does everything.
#
# This script has been tested for   cross-compilation  on a Linux system
# with the mingw cross-compiler and wine installed.

install=$HOME/mingw
src=$(pwd)

case $(uname) in
    MINGW*)
	export PATH=$install/bin:$PATH
	;;
    *)
	export WINEPATH="$(winepath -w $install/bin)"
	;;
esac

###########################
# Download and install the GMP library.

download_gmp()
{ [ -f gmp-5.0.2.tar.bz2 ] || wget ftp://ftp.gmplib.org/pub/gmp-5.0.2/gmp-5.0.2.tar.bz2
  tar jxf gmp-5.0.2.tar.bz2
}

build_gmp()
{ ( cd gmp-5.0.2
    ./configure --host=i586-mingw32msvc --prefix=$install \
       --enable-shared --disable-static
    make
    make install
  )
}

###########################
# Download and install the Pthreads-win32 library.

download_pthread_win32()
{ cd $src
  [ -f pthreads-w32-2-8-0-release.tar.gz ] || wget ftp://sourceware.org/pub/pthreads-win32/pthreads-w32-2-8-0-release.tar.gz

  tar xzf pthreads-w32-2-8-0-release.tar.gz
}

build_pthread_win32()
{ ( cd pthreads-w32-2-8-0-release
    make -f GNUmakefile CROSS=i586-mingw32msvc- \
        LFLAGS="-lwsock32 -Wl,--out-implib=libpthreadGC2.dll.a" GC
    cp pthread.h semaphore.h sched.h $install/include/
    cp pthreadGC2.dll $install/bin/
    cp libpthreadGC2.dll.a $install/lib/
  )
}

###########################
# Download and install zlib

download_zlib()
{ [ -f zlib-1.2.5.tar.bz2 ] || wget http://garr.dl.sourceforge.net/project/libpng/zlib/1.2.5/zlib-1.2.5.tar.bz2
  tar xjf zlib-1.2.5.tar.bz2
}

build_zlib()
{ ( cd zlib-1.2.5
    make -f win32/Makefile.gcc PREFIX=i586-mingw32msvc- BINARY_PATH=$install/bin INCLUDE_PATH=$install/include LIBRARY_PATH=$install/lib SHARED_MODE=1 install
  )
}

###########################
# Do the whole lot for all prerequisites

build_prerequisites()
{ download_gmp
  build_gmp
  download_pthread_win32
  build_pthread_win32
  download_zlib
  build_zlib
}

###########################
# Download and unpack a SWI-Prolog source distribution.

download_swipl()
{ if [ ! -d pl-devel ]; then
    git clone git://www.swi-prolog.org/home/pl/git/pl-devel.git
  fi

  ( cd pl-devel
    git pull
    git checkout mingw
    ./prepare --yes
  )
}

build_swipl_core()
{ export CIFLAGS="-I$install/include"
  export LDFLAGS="-L$install/lib"
  ( cd pl-devel
    ./configure --host=i586-mingw32msvc --prefix=$install \
        --disable-readline --disable-libdirversion --enable-shared
    make
    make install
  )
}

build_swipl_packages()
{ ( cd pl-devel/packages
    export CPPFLAGS=-I$install/include
    export PKGLDFLAGS=-I$install/lib
    export PKG="clib zlib"
    ./configure --host=i586-mingw32msvc --prefix=$install
    make
    make install
  )
}

build_swipl()
{ build_swipl_core
  build_swipl_packages
}

###########################
# Do the whole lot

build_all()
{ build_prerequisites
  build_swipl
}
