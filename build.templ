#!/bin/bash
#
# This is the script we use to   build  SWI-Prolog and all its packages.
# Copy the script to  `build',  edit   to  suit  the  local installation
# requirements and run it. Once correct, upgrading   to a new release is
# now limited to getting the new sources and run ./build.

# [EDIT] Prefix location of the installation. It is _not_ adviced to use
# a    versioned    prefix.    The    system      will     install    in
# $PREFIX/lib/pl-<version> and create symlinks from  $PREFIX/bin for the
# main  programs.  Users  can  always  use  older  versions  by  running
# $PREFIX/lib/pl-<version>/bin/<arch>/pl
#
# If you change PREFIX such that the system  is installed in a place for
# which you have no write access, set  SUDO   to  the command to run the
# remainder of the commandline as privilaged   user. E.g., if you change
# PREFIX to /usr/local/bin you typically must change SUDO to "sudo"

PREFIX=$HOME
SUDO=
#SUDO="sudo"

# [EDIT] Version of make  to  use.  This   must  be  GNU-make.  On  many
# proprietary Unix systems this is installed   as  'gmake'. On most open
# systems make is GNU-make. In you have  multi-core hardware you can use
# 'make  -j'  to  build  the  system    faster   using  all  your  cores
# (experimental (BROKEN; please help debugging)).

MAKE=make
# MAKE='make -j'

# [EDIT] Compiler and options.
#
#	CC:	 Which C-compiler to use
#	COFLAGS: Flags for the optimizer such as "-O3" or "-g"
# 	CMFLAGS: Machine flags such as "-m64" (64-bits on gcc)
# 	CIFLAGS: Include-path such as "-I/opt/include"
# 	LDFLAGS: Link flags such as "-L/opt/lib"
#
# Leaving an option blank leaves the  choice to configure. The commented
# values below enable much better C-level debugging with almost the same
# performance on GCC based systems (the default is to compile using -O3)
# For optiomal performance, see also --enable-useprofile below.

# export CC=
# export COFLAGS="-O2 -gdwarf-2 -g3 -fno-strict-aliasing"
# export CMFLAGS=
# export CIFLAGS=
# export LDFLAGS="-O2 -g"

# [EDIT] On MacOS you need this to get some libraries from Macports
# export LIBRARY_PATH=/opt/local/lib
# export CPATH=/opt/local/include

# [EDIT] On Solaris also puts there stuff everywhere ...
# export CIFLAGS=-I/opt/csw/include/ncurses
# export LDFLAGS=-L/opt/csw/lib

export CFLAGS="$CMFLAGS $CIFLAGS"

################################################################
# Package (add-ons) selection
################################################################

# [EDIT] Packages to configure. Leaving it   blank  compiles all default
# packages. The final set of packages is
#
#	${PKG-<default>} + $EXTRA_PKGS - $DISABLE_PKGS

# export PKG=

# [EDIT] Packages to skip.  Leaving it blank compiles all packages.
# export DISABLE_PKGS="jpl ssl odbc"

# [EDIT] Packages to add.
# export EXTRA_PKGS="db ltx2htm space"

# [EDIT] Where to find the jar for Junit 3.8.  Needed to test jpl
# export JUNIT=/opt/local/share/java/junit.jar

################################################################
# Misc stuff
################################################################

# [EDIT] Extra options to pass to the toplevel configure.

# [EDIT] Using --link, the system is installed using symbolic links.
# This means you cannot remove or clean the sources, but it largely
# simplifies editing the system Prolog files during development.
#
# The config --enable-useprofile exploits GCC -fprofile-use option.
# The system is compiled, profiled and re-compiled to get better
# branch-prediction.  This makes the system approx. 10% faster.
# Do not use this for developing the kernel because it complicates
# maintenance.
# EXTRACFG="--link"
# EXTRACFG="--enable-useprofile"

################################################################
# No edit should be needed below this line
################################################################

V=`cat VERSION`
makeonly=false

case "$1" in
   --make)	makeonly=true
		;;
   *)		;;
esac

if [ "$makeonly" = false ]; then
  ./configure --prefix=$PREFIX --with-world  $EXTRACFG 2>&1 | tee configure.out
fi

$MAKE 2>&1 | tee make.out
$SUDO $MAKE install 2>&1 | tee make-install.out

