\libdoc{clpfd}{CLP(FD): Constraint Logic Programming over Finite Domains}

\label{sec:clpfd}

\begin{tags}
    \tag{author}
\url[Markus Triska]{https://www.metalevel.at}
\end{tags}

\subsection{Introduction}

\label{sec:clpfd-intro}

This library provides CLP(FD): Constraint Logic Programming over
Finite Domains.

CLP(FD) is an instance of the general CLP(.) scheme, extending logic
programming with reasoning over specialised domains. CLP(FD) lets us
reason about \textbf{integers} in a way that fits the relational
nature of~Prolog.

There are two major use cases of CLP(FD) constraints:

\begin{enumerate}
    \item \textbf{declarative integer arithmetic} (\secref{clpfd-integer-arith})
    \item solving \textbf{combinatorial problems} such as planning, scheduling
and allocation tasks.
\end{enumerate}

\noindent
The predicates of this library can be classified as:

\begin{itemize}
    \item \textit{arithmetic} constraints like \predref{\Sceq}{2}, \predref{\Scgt}{2} and \predref{\Scne}{2} (\secref{clpfd-arithmetic})
    \item the \textit{membership} constraints \predref{in}{2} and \predref{ins}{2} (\secref{clpfd-membership})
    \item the \textit{enumeration} predicates \predref{indomain}{1}, \predref{label}{1} and \predref{labeling}{2} (\secref{clpfd-enumeration})
    \item \textit{combinatorial} constraints like \predref{all_distinct}{1} and \predref{global_cardinality}{2} (\secref{clpfd-global})
    \item \textit{reification} predicates such as
      \predref{\Scequal}{2} (\secref{clpfd-reification-predicates})
    \item \textit{reflection} predicates such as \predref{fd_dom}{2}
      (\secref{clpfd-reflection-predicates})
\end{itemize}

In most cases, \textit{arithmetic constraints}
(\secref{clpfd-arith-constraints}) are the only predicates you will
ever need from this library. When reasoning over integers, simply
replace low-level arithmetic predicates like \verb$(is)/2$ and
\verb$(>)/2$ by the corresponding CLP(FD) constraints like
\predref{\Sceq}{2} and \predref{\Scgt}{2} to honor and preserve
declarative properties of your programs. For satisfactory performance,
arithmetic constraints are implicitly rewritten at compilation time so
that low-level fallback predicates are automatically used whenever
possible.

Almost all Prolog programs also reason about integers. Therefore, it
is highly advisable that you make CLP(FD) constraints available in all
your programs. One way to do this is to put the following directive in
your \verb$~/.swiplrc$ initialisation file:

\begin{code}
:- use_module(library(clpfd)).
\end{code}

All example programs that appear in the CLP(FD) documentation assume
that you have done this.

Important concepts and principles of this library are illustrated by
means of usage examples that are available in a public git repository:
\url[\textbf{github.com/triska/clpfd}]{https://github.com/triska/clpfd}

If you are used to the complicated operational considerations that
low-level arithmetic primitives necessitate, then moving to CLP(FD)
constraints may, due to their power and convenience, at first feel to
you excessive and almost like cheating. It \textit{isn't}. Constraints are an
integral part of all popular Prolog systems, and they are designed
to help you eliminate and avoid the use of low-level and less general
primitives by providing declarative alternatives that are meant to be
used instead.

When teaching Prolog, CLP(FD) constraints should be introduced
\textit{before} explaining low-level arithmetic predicates and their
procedural idiosyncrasies. This is because constraints are easy to
explain, understand and use due to their purely relational nature. In
contrast, the modedness and directionality of low-level arithmetic
primitives are impure limitations that are better deferred to more
advanced lectures.

We recommend the following reference (PDF:
\url[metalevel.at/swiclpfd.pdf]{https://www.metalevel.at/swiclpfd.pdf}) for
citing this library in scientific publications:

\begin{code}
@inproceedings{Triska12,
  author    = {Markus Triska},
  title     = {The Finite Domain Constraint Solver of {SWI-Prolog}},
  booktitle = {FLOPS},
  series    = {LNCS},
  volume    = {7294},
  year      = {2012},
  pages     = {307-316}
}
\end{code}

More information about CLP(FD) constraints and their implementation is
contained in: \url[\textbf{metalevel.at/drt.pdf}]{https://www.metalevel.at/drt.pdf}

The best way to discuss applying, improving and extending CLP(FD)
constraints is to use the dedicated \const{clpfd} tag on
\url[stackoverflow.com]{http://stackoverflow.com}. Several of the world's
foremost CLP(FD) experts regularly participate in these discussions
and will help you for free on this platform.

% remainder, generated from Markdown and PlDoc
\input{clpfdlib.tex}

