			 SWI-Prolog for Win32
			    Jan Wielemaker
			       06/06/94

			  (Updated: 04/12/95)
			   (Version 2.1.13)


This distribution contains SWI-Prolog for   Windows-'95,  Windows-NT and
Windows 3.1/Win32s.  It is a port of version 2.1.13.  SWI-Prolog runs in
a simple MS-Window providing traditional stream-based interaction.


Installation:
=============

Unpack the archive anywhere  you  like.    You  can  start SWI-Prolog by
starting the executable bin\pl.exe.  *DO NOT*   move  pl.exe, as it uses
the path-name of the executable to  find   its  home directory.  You may
wish to create an ICON for it.  Either  do this by hand using the normal
program-manager UI or start SWI-Prolog by double clicking the executable
and typing:

	?- progman_setup.

which  will  create  the  program  group  SWI-Prolog  and  an  icon  for
SWI-Prolog in this group.  The default working directory is set to C:


Redoing the boot compilation
============================

The system normally loads the Prolog code from the file startup\startup.
If you changed anything to the Prolog   sources in the boot directory or
the system appears to have path-problems   with system related files, it
may be wise to redo the boot compilation.  To do this, run the command

	bin\pl.exe -O -o startup\startup -b boot\init.pl

The current working directory must  be   the  Prolog base directory.  In
both Windows-95 as NT, you can run this   from a DOS-box, in Windows 3.1
you will have to use the "Run ..." option from the program manager.


Status:
=======

This is the 8th release  for  the   Windows  platform.   The  first four
releases were based on the WATCOM 32-bit  extender for Windows 3.1.  The
5th release has been developed  with   Microsoft  Visual C/C++ 2.0 under
Windows-NT 3.5.  This release was compiled  and tested under Windows-'95
using MSVC 2.0.  It has been used in the development of XPCE for quite a
while and appears to run stable on '95 and -NT.  The status under win32s
is unclear.  I've received various problem   reports, but didn't succeed
in reproducing them.

I'm not sure whether it runs  on   machines  that  lack a floating point
processor.

This version has Virtual Memory Management   based stack expansion (i.e.
no stack-shifter and thus no bugs therein :-).

This version also handles crashes often gracefully.


Version 2.1.14 windows-specific changes
=======================================

	* Fixed bug in the garbage collector, which is certainly
	relevant on win32s, but maybe relevant under NT and '95 too.
	This but is irrelevant for the Unix versions.


Version 2.1.13 windows-specific changes
=======================================

	* Changed statistics(cputime, X) to use the Win32
	GetProcessTimes() call when supported (NT only, it appears).
	This implies that the system returns quite accurate process
	user time under NT and wall-clock time minus the time waiting
	for user-input under Windows '95 and Windows 3.1/win32s.


Version 2.1.10 windows-specific changes
=======================================

	* added ISO compliant open/4 that allows you to open files
	  both in text and binary mode.

	* Added ISO compliant character-escape codes for reading
	  quoted atoms.  This is notably problematic when using
	  DOS filenames: ?- ['c:\new.pl'] will cause the system to look
	  for the file

		c:
		ew.pl

	  which, of course, it cannot find.  Either use \\ or the Unix /
	  to separate path-components.  Note that
	  set_feature(character_escapes, false) may be used to switch
	  back to the old behaviour.

	* Added proper color handling to the console window (reading
	  the users color-settings).  Changed font to be the stock
	  ANSI fixed font rather then the system font.  Not that
	  colors may be changed using:

		?- load_foreign_library(dlltest).
		?- rlc_color(window, 255, 0, 0).

	  The first argument is window, text, highlight or
	  highlighttext.  See also dlldemo\dlltest.c.

	* Fixed filename completion from the console window.

	* The console window now signals end-of-file both on the
	  Unix Control-D as the DOS Control-Z.

	* Fixed expand_file_name/2 to be case-insensitive.  This fixes
	  make/0.

	* Added support for name-associations.  If a file is saved using
	  qsave_program/2 with the extension .QLX, associating pl.exe
	  with .QLX files will make them self-starting.

	  Associating pl.exe with .PL files will cause Prolog to start,
	  change directory to the directory holding the file and load
	  the file.

	* Handle Control-C to interrupt execution correctly in most
	  cases.

	* Fixed name/2 and friends to use 8-bit characters properly
	  if compiled on a compiler treating char as signed (MSVC++).


Version 2.0.6 windows-specific changes
======================================

	* Added DDE server interface and some more options to the DDE
	  client interface.

	* Added DLL interface.  I know it loads 32-bit NT DLL's, I don't
	  think it will load 16-bit Windows DLL's, but I'm not sure.

	* The console may now be used with 2-button mice.  `Paste',
	  normally assigned to the middle button may be activated using
	  Alt-Y or pressing both buttons at the same time (three-button
	  emulation as done by many X-servers).

	* Long-filename handling is (as yet) based on how NT handles
	  long filenames on FAT partitions.  Only activated for Win32s;
	  NT has long filenames.

	* Representation of absolute paths has changed from /c:/... to
	  the more natural c:/...  Use is_absolute_file_name/1 to test
	  whether a filename is absolute.  The old /c:/... is accepted
	  as well.

	* Installation is now very simple: just unpack the whole lot
	  any place you like and start the binary (.../bin/pl.exe).
	  You can make an icon for it.  *DON'T* move pl.exe and the
	  DLL files to another directory as the pathname of the 
	  executable is used to determine the home directory.


Version 1.9.5 windows-specific changes
======================================

	* Fixed floating-point representation problem
	* Fixed DDE interface (my mistake, to which Don Dwiggens pointed
 	  me).
	* Added dde_execute/2 to give DDE execution commands.

Version 1.9.4 windows-specific changes
======================================

	* Compiled for floating-point emulations on machines that
	  lack floating point hardware.
	* Fixed memory management bug in stack-expander.
	* Added DDE interface.
	* Added editor declaration for Windows notepad.
	* Fixed problem in file-name mapping that caused existing
	  files to be reported as non-existing sometimes.

Version 1.9.0 windows-specific changes
======================================

	* Filename conversion and finding the home-directory is
	  fixed.
	* The drive's root directory is now handled properly.
	* Fatal errors will now often :-( show a Windows message-box
	  instead of just quiting Prolog.  This allows you to read
	  the message :-)
	* Control-C break is tested in the main virtual machine loop.
	  A few procent slower, but it does allow you to break a
	  looping program ...
	* Cut-and-paste is implemented in the console-window, allowing
	  for xterm-like cut-and-paste (left/right to start/extend the
	  selection and middle to paste it).
	* Improved error reporting.
	* Now Writes files in DOS text-format rather then using binary
	  mode.
	* Installation has changed a bit.  Read it!
	  ============


Copyright:
==========

SWI-Prolog may be  distributed  freely   for  non-commercial  use.   See
pl\licence for a more complete description of your rights.


Requirements:
=============

386/486/pentium  based  PC  running    MS-Window-NT,   MS-Window-'95  or
MS-Windows 3.1 with win32s (1.2  or   later)  installed.   SWI-Prolog is
compiled using the MSVC++ 2.0 C-compiler and should run on machines with
and with or without floating point   coprocessor.   Minimum memory usage
will be about 1 MB.


Parts:
======

The system consists of four parts:

	bin\pl.exe	32-bits Windows Executable.
	bin\console.dll	The console window DLL
	bin\uxnt.dll	Unix file-system access compatibility DLL
	bin\*.lib	DLL stub/export files you need to make new DLL's
	bin\*.exp

	startup/startup	Quick-Load-File containing procompiled Prolog
			code, defining various essential parts of the
			Prolog system.

	library\	The Prolog library file.  Holds the Prolog
			library and help system.

	boot\		Contains the Prolog source for building pl.qlf.
			You don't need this if you don't want to look
			at this or modify it.

	include\	Files you need to define new DLL's

Installation:
=============

Unpack the zip file anyplace you like.   It will create a directory `pl'
in the current directory with the   structure  described above.  You can
use `Run ...' from the program manager or double click on the executable
in bin\pl.exe from the file manager to run  the system.  You can make an
icon for the program manager as you are used to:

Create a `New Program Object' using the Window Program Manager's `new...'
option.  The fields should be:

	Description:		SWI-Prolog
	Command Line:		c:\pl\bin\pl.exe
	Working Directory:	The place you work

Modify `Command Line' if you installed SWI-Prolog in another directory.


Configuration of the Console:
=============================

The stream-based console window is a  completely separate library, using
its own configuration info.  It will  look at two environment variables:
"CONSOLE" and the base-name of the running  program ("PL" if you use the
default configuration).  Options in "PL"   overrule  those in "CONSOLE".
Options in "CONSOLE" apply to any application compiled using the console
library.  The options variable should contain a string of the form

	<name>:<value>{,<name>:<value>}

Where <name> is one of:

	<name>	default		description
	sl	200		Number of lines you can scroll back.
				There is no limit, but the more you
				specify the more memory will be used.
				Memory is allocated when data becomes
				available.
	rows	24		Initial number of lines
	cols	80		Initial number of columns
	x	CW_USEDEFAULT	X-coordinate of the top-left corner.
	y	CW_USEDEFAULT	Y-coordinate of the top-left corner.
				
You will normally specify this in your autoexec.bat file.  Here is
what I use:

	set CONSOLE=sl:600,x:400,y:400

Editor interface
================

SWI-Prolog defines an interface to  an   external  text editor using the
predicates ed(+Predicate) and edit(+File).   Normally,   after  the user
quits the editor, the system will run  the predicate make/0 to recompile
all modified files.

You can specify the editor in autoexec.bat   or ~/.plrc.  If you wish to
use the simple notepad editor delivered  with Windows, put the following
line in your ~/,plrc:

	?- setenv('EDITOR', notepad).


Windowing and Graphics
======================

SWI-Prolog itself has  no  graphical   capabilities.   Graphics  can  be
provided by the  XPCE  toolkit,  for   which  an  MS-Windows  version is
available.  XPCE is *not* free software.  It is distributed for academic
users  at  a  price  of  dfl.   500,--  (at  the  time  of  writing,  $1
approximates dfl.  1.60).  This licence   includes classroom and student
usage.   For  details,    ftp://swi.psy.uva.nl/pub/xpce/Windows/...   or
contact xpce-request@swi.psy.uva.nl if you are interrested.


Filenames:
==========

All filenames are internally handled in   a Unix compatible format: they
are lowercase, the directories are  separated   with  a '/' and absolute
files are of the  form  <drive>:/...    Filenames  will  be converted to
DOS/Windows format just before invoking the C-library functions.

Filename expansion will translate `~' to  the environment variable HOME.
Constructs  of  the  form  $VAR  in    filenames  are  expanded  to  the
corresponding environment variable.  DOS %VAR% is not recognised.

The user may specify filenames either using   DOS format or Unix format.
Unix format should be used in source-files that   need to be run both on
the Unix and DOS/Windows version.

The predicate prolog_to_os_filename(?PrologPath, ?OsPath) may be used to
explicitely  convert  filenames  between   both  representations.   This
predicate exists in all versions of 1.9.4  and later.  On unix it simply
unifies the arguments.  
	
Features and bugs specific to this version:
===========================================

	* Dynamically expanding runtime stacks using Virtual Memory
	  Management.

	* Garbage collection on global (heap) and trail-stacks.

	* If I read the documentation correctly: 1 MB dynamically
	  expanding C-stack when using NT and 128 KB fixed stack when
	  running Win32s

	* GNU-Readline 1.2 based input editor that allows for GNU-EMACS
	  like editing of the command line.  This input editor runs on
	  top of a simple, still incomplete I/O window.	 Features:

	  	* Command history using ^P, ^N
		* Cursor movement using ^B, ^F, etc.
		* Many more; just try the GNU-Emacs bindings!
		* End-of-file is ^D or ^Z
		* Completion on files and atoms using TAB, viewing
		  alternatives using ESC-?

		* Window may be resized and scrolled.
		* Cut-and-paste is similar to X11's xterm:
		  left-button starts a selection, right-button extends
		  it and middle-button pastes (also Alt-Y or clicking
		  left-and-right simultaneous if you have only 2
		  buttons.

	  Bugs:

		* Showing matching bracket does not work

	* save/[1,2] and save_program/[1,2] do not work.  qsave_program
	  is fine though.  The result may be exchanged between
	  platforms, even Unix and Win32.

	* profile/1 does not work.

	* load_foreign/[2,5] does not work.  load_foreign_library/[1,2],
	  may be used to load (32-bit) .DLL files though.

	* The statistics/[0,2] reported CPU-time is strange.  I've not
	  managed to get proper statistics.  It uses the clock()
	  systemcall and substracts time spent reading from the
	  terminal.  Is now ok on Windows-NT.

	* help/1 just dumps it output in the console window.  Should be
	  a separate window some day ...


Boot compilation:
=================

The file bin/pl.qlf is a `Prolog Quick  Load File' file created from the
Prolog sources in the boot subdirectory.  If you want to change anything
there, you can recreate the startup file using the command:

	bin\pl.exe -O -o startup\startup -b boot\init.pl

For this command-line the working directory should be the home directory
of Prolog.  If not, you should absolute paths.


Sources:
========

The common source for all platforms is  available using anonymous ftp to
swi.psy.uva.nl,  directory  pub/SWI-Prolog.   The   Windows  version  is
compiled using Microsoft MSVC++ 2.0 under Windows-NT 3.51.

It uses two libraries, both of which may be found at ftp.swi.psy.uva.nl:
Library xnt.lib redefines the WIN32 file  access library to handle both
Unix and DOS format files and make   the directory operations work on the
root-direcories of a drive.  Library   readline.lib provides the console
window and readline command-editor.  Both libraries are assumed to be
installed next to the Prolog sources:

	..../xnt/...		uxnt.dll Unix file-system library
	..../console/...	console.dll Console window library
	..../readline/...	Readline 1.2 (for console) library
	..../pl/...		SWI-Prolog source
