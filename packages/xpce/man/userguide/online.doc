\chapter{Using the online manual}		\label{sec:online}

In the previous sections we have introduced PCE using examples and
described the global architecture of the PCE/Prolog environment.
The primitives of PCE are simple, but PCE as a whole is a massive
library of very diverse classes with many methods.  The current
system contains about 150 classes defining over 2700 methods.  This
section introduces the online manual tools provided with PCE.


\section{Why online?}

Documenting PCE entails describing all classes, variables and
methods in the system as well as how they are related and intended
to be used.  The class hierarchy and the associated variables and
methods provide a natural organisation for these descriptions.
This organisation is suitable for finding exact descriptions if the
user has a fairly global understanding of PCE's functionality.

Novice users lack this understanding and for them it would be better
to organise the material around groups of classes and methods thereof
that are designed to cooperate.  Many classes and methods are designed
to cooperate in different organisations to satisfy various
functionalities.  Other methods provide some specific functionality on
their own.  Therefore such an organisation is only partial and
descriptions often need to be duplicated or referred to.

\index{hyper-text}
For these reasons we decided to write paper documentation providing a
global overview of the interface and architecture (this document), the
functionality provided by the classes (\cite{PCE:overview}) and the
issues surrounding user-defined classes (\cite{PCE:udc}.  The
reference material is provided online.  The material for the online
manual is as far as possible extracted from PCE's internal
representation of classes: available classes, methods and variables,
inheritance and type information.  Associated {\em hyper-text}
cards complete the documention.  The online manual provides various
organising principles over this material.

This approach allows novice users to learn about the basics and
functional organisation from a conventional document.  Once they have
a basic understanding of PCE's structure and architecture the online
manual provides fast access from different viewpoints to small pieces
of relevant information.  The extracted part of the online material
is guaranteed to be consistent with the system you are using (even
if you decided to modify some things).  The descriptions can easily
be modified and searched.

Finally, the online manual allows you to browse through the
definitions of classes defined by the PCE/Prolog libraries and the
application (see \cite{PCE:udc}). 


\section{Overview}

The online manual consists of a large set of tools to examine
different aspects of the PCE/Prolog environment and to navigate
through the available material from different view-points.

\begin{itemize}
    \tick{The inheritance hierarchy}\index{class hierarchy}%
The `Class Hierarchy' tool allows the user to examine PCE's class
hierarchy.  This tool reads the inheritance relations from the class
objects and thus also visualises application or library classes.
Figure~\ref{fig:classhierarchy} is created using this tool.
    \tick{The structure of a class}\index{class,structure}%
The most important tool is the `Class Browser'.  It provides the
user with a view of material related to a class.  As everything in
PCE is an object and thus an instance of a class this tool provides
access to everything in PCE, except for the Prolog interface.
    \tick{Globally available object references}\index{global objects}%
The PCE environment provides predefined objects (@pce, @prolog, @arg1, etc.).
The tool allows the user to find these objects.
    \tick{Prolog interface predicates}\index{Prolog interface}%
This tool documents all the PCE/Prolog predicates.
    \tick{Instances}
    \index{inspecting instances}\index{object,inspecting}%
This tool is part of the runtime support system.  It allows you to
inspect the persistent state associated with objects.
    \tick{Structure of User Interface}
    \index{UI,structure of}\index{consists-of}%
This tool provides a `consists-of' view of all displayed visual objects.
It provides a quick overview of the structure of an interface.  It is
a useful for finding object-references, examining the structure of
an unknown UI and verifying that your program created the expected 
structure.
    \tick{The manual itself (help)}
    \index{help,on manual}%
The manual tools are documented by itself.  Each tool has a `Help' button
that documents the tool.
    \tick{PCE Demo programs}
    \index{demo programs}%
The `Demo Programs' entry of the `File' menu starts an overview of the
available demo programs and lets you start these demos.  The sources of
the demos may be found in \file{.../xpce/prolog/lib/demo}, where ...
refers to the PCE installation directory, which may be obtained using
\begin{code}
1 ?- get(@pce, home, Home).
Home = '/usr/local/lib/xpce-4.7.1'
\end{code}
    \tick{Examples}
    \index{examples}
The `Examples' tool provides an overview of various short pieces of
example code.  The code may be loaded into Prolog and executed from the
tool.
\end{itemize}


\section{Notational conventions}

The text shown by the online manual uses some notational conventions.
The various overview tools indicate candidate documentation cards with
a {\em \idx{summary line}}.  This line is of the form:

\begin{quote}
{$<$Identifier$>$ $<$Formal Description$>$ [``$<$Summary$>$'']}
\end{quote}

The `Identifier' is a single letter indicating the nature of the
documentation card.  The defined identifiers are: {\bf B}rowser
(Manual Tool), {\bf C}lass, {\bf E}xample, {\bf K}eyword, {\bf M}ethod,
{\bf O}bject, {\bf P}redicate, {\bf R}esource, {\bf T}opic and
{\bf V}ariable (instance-variable).

The `Formal Description' is a short description derived from the
described object itself:

\begin{center}
\begin{tabular}{|l|p{3in}|}
\hline
V class \verb$-$selector: type	& Variable that cannot be accessed directly \\
V class \verb$<-$selector: type	& Variable that may be read, but not written \\
V class \verb$<->$selector: type& Variable that may be read and written \\
V class \verb$->$selector: type	& Variable that may only be written \\
M class \verb$->$selector: type ...	& Send-Method with argument-types \\
M class \verb$<-$selector: type ... \verb$-->$type	& Get-Method with
			   argument-types returning value of type \\
R Class.attribute: type & Resource of specified class for specified
		        attribute.  \\
\hline
\end{tabular}
\end{center}

The same notational conventions are used in the running text of a
card.  See section~\ref{sec:card}.


\subsection{Argument types}

\index{argument,type}\index{type}
PCE is a partially typed language.  Types may be defined for both
method arguments and instance variables.  A type is represented by an
instance of class \class{type}.  PCE defines a conversion to create
type objects from a textual representation.  A full description of this
conversion may be found in the online manual (method `type <-convert').
In this document we will summarise the most important types:

\begin{itemize}
    \tick{int}
PCE integer datum.
    \tick{<low>..<high>}
Range of integers (including <low> and <high>).
    \tick{any}
Both integers and objects.  Function objects will be evaluated.
See section~\ref{sec:function}.
    \tick{object}
Objects only. Function objects will be evaluated.
See section~\ref{sec:function}.
    \tick{$<$class-name$>$}
Any instance of this class or one of its sub-classes.
    \tick{[$<$type$>$]}
Either this type or @default.  Trailing arguments to methods that
accept @default may be omitted.
    \tick{$<$type$>$*}
Either this type or @nil.
    \tick{$<$type$>$ ...}
Methods with this type specification accept any number of these
arguments that satisfy $<$type$>$.
    \tick{\{$<$atom1$>$,$<$atom2$>$,...\}}
Any of these name objects.
\end{itemize}

\noindent
For example, the ->initialise method of a graphical text object has
type declaration:

\begin{code}
[char_array], [{left,center,right}], [font]
\end{code}

The first argument is an instance of class \class{char_array}, the
super-class of \class{name} and \class{string}).  The second argument
either `left', `center' or `right' and the last argument is a font
object.  All arguments are between square brackets and may thus be
omitted.


\section{Guided tour}

This section provides a `guided tour' through the manual system.  If
you have the system at hand, please start it and try the examples.
For each of the central tools of the manual we will present a
screendump in a typical situation and explain the purpose and some
common ways to use the tool.


\subsection{Class browser}		\label{sec:classbrowser}

\postscriptfig{classbrowser}{The Class Browser}

The ``Class Browser'' is the central tool of the online manual.  It
provides an overview of the functionality of a class and options to
limit the displayed information.  Figure~\ref{fig:classbrowser} shows
this tool in a typical situation.  In this example the user is
interested in methods dealing with selecting a box object.

The dialog to the left-side of the tool specifies {\em what}
information is displayed.  The top-right window displays the class
together with the initialisation arguments (the arguments needed to
create an instance of this class) as well as its super-classes (see
also the ``Class Hierarchy'' tool).  The large right window displays a
list of matching classes, variables, methods and resources.  When an
item is tagged with a ``\idx{(+)}'' there is additional information
that may be obtained by (double-) clicking the card to start the
``Card Viewer'' (see section~\ref{sec:card}).

The class browser may be used for various queries ranging from a
simple overview of variables to an `apropos' search through the class
hierarchy.

The {\bf Display} menu determines the objects searched for.  {\sf
Self} refers to the class itself, {\sf Sub Class} refers to a direct
subclass of this class.  The other fields refer to instance-variables,
methods with send- and get-access and X-resources.  By default {\em
Self} and {\em Variable} are selected, providing an entry for the
class itself and each of its instance variables in the right-window.
The variables often provide a good overview of the functionality of
the class.  When the user is interested in a particular operation
s/he normally selects {\sf Send Method}, {\sf Get Method} too.

The {\bf Class} text_item (text-entry-field) may be used to  switch to
a new class.

The {\bf Field} and {\bf Search} menus limit the displayed cards to
those that have the specified search string in one of the specified
fields.  While searching, the case of the characters is ignored (i.e.\
lower- and uppercase versions of the same letter match).  Searching in
the {\sf Name} field is useful to find a particular method if the name
(or part of it) is known.  Searching in the {\sf Summary} is similar
to Unix ``man -k(1)'' or ``apropos(1)''.\index{apropos (unix)}

The {\bf Scope} menu determines how the inheritance hierarchy is used
to direct the query.  When {\sf Own}, only objects (variables,
methods, etc.) {\em directly} associated to this class are displayed.
This is the default.  When {\sf Super}, the inheritance hierarchy is
traversed and all inherited aspects of the class are displayed as
well.  When {\sf Sub} all material in the entire subtree whose root is
the current class is considered.  When using either {\sf Super} or
{\sf Sub} it is advised to provide a search string to limit the number
of displayed card summaries.%
    \footnote{The current implementation of the class-browser does not
	      display methods realised with delegation (see section~
	      \ref{sec:delegation}).  Delegation is implemented using
	      the methods `object ->send_catch_all' and
	      `object <-get_catch_all'.   The delegation relations
	      are normally described there.}
	      

Below we illustrate how some commonly asked questions may be answered
with the class browser.

\begin{itemize}
    \tick{What are variables of a bitmap?}
Select {\sf variable} in the {\bf Display} menu, clear {\bf Search},
set {\bf Scope} to {\sf Own} or {\sf Super}.  Finally type `bitmap'
in {\bf Class} and hit return.
    \tick{How can I position the caret in an editor?} The caret can
only be changed using send-methods. Either the name or the summary is
likely to have `caret' as a substring.  Thus, {\bf Display} is set to
{\sf Send Method}, {\bf Field} to {\sf Name} and {\sf Summary}, search
to `caret'.  {\bf Scope} is specified to { \sf Own} as editor is a
subclass of device, which has nothing to do with text-processing.
    \tick{Which graphical classes have specialised event processing?}
A graphical has specialised event-processing if the send-method `event'
is defined.  Therefore {\bf Display} is set to {\sf Send method}, {
\bf Field} to {\sf Name} and {\bf Search} to {\sf event}.  {\bf Scope}
is set to {\sf Sub} as we are interested in redefinitions in
sub-classes.  Finally `graphical' is entered in the {\bf Class}
field.
    \tick{Which methods handle image objects}
This very general query may be asked by selecting the appropriate
method type(s) in {\bf Display}.  {\bf Field} is set to {\sf Name} and
{\sf Summary}, {\bf Search} is set to `image', {\bf Scope} to {\sf Sub}
and finally {\bf Class} is filled with `object' to search the entire
PCE hierarchy.
\end{itemize}


\subsection{Reading cards}		\label{sec:card}

\postscriptfig{card}{The Card Viewer}

The other tools of the manual allow the user to {\em find} cards with
documentation on the topic(s) the user is looking for.  Experienced
users often are only interested in the exact name or arguments of a
method.  The information provided by the summary-lists often suffices
for this purpose.  Whenever a card is marked with a ``(+)'' in the summary
list it may be opened by double-clicking it.  This starts the ``Card
Viewer'' tool.  Figure~\ref{fig:card} is a screendump of this tool
showing the description of the send-method `selection' of class
`device'.

The ``Card Viewer'' displays the formal information and all available
attributes from the card related to the displayed object (method, variable,
class, ...).  It uses a couple of patterns to determine relations to other
manual material from the text.  Each hit of these patterns is highlighted.
When the user double-clicks on highlighted text the ``Card Viewer'' will
jump to the related material.

The ``See Also'' labeled browser in the bottom-right corner shows
explicitly related material.  If the user single-clicks an entry
the contents of the related card will be displayed in the editor
part of the ``Card Viewer'' while the ``See Also'' will not change.
If the user double-clicks in the browser both the editor and the
``See Also'' browser will switch to the related information.

\subsection{Keyword browser}

\postscriptfig{keyword}{The Keyword Browser}

The ``Keyword Browser'' provides access on keywords.  Figure~\ref
{fig:keyword} shows this tool in a typical configuration.  The
browser on the left-side provides all defined keywords.  The browser
on the right-side shows related manual material.

\index{search,in browser}\index{browser,searching}
PCE browsers have (incremental-) searching facilities.  If the user
presses a letter, the browser will search for the first item that
starts with this letter.  Subsequent typing extends the (prefix-)
search string.  The other bindings are described in the figure.

\subsection{Class hierarchy}		\label{sec:classhierarchy}

\postscriptfig{hierarchy}{Class Hierachy Tool}

The ``Class Hierachy'' tool may be used to get an overview of PCE's
class hierarchy or to find the (inheritance) relations of a
particular class with other classes.  Note that PCE's inheritance
hierarchy has a technical foundation rather than a conceptual.
Super-classes are motivated by the need for code-sharing.


\section{Special Methods}

The methods described below are activated from PCE's virtual machine
and allow a class to define creation, destruction, type conversion,
delegation, etc.  These methods may be found using the ``Class
Browser'' after which their documentation card may be requested.

\begin{description}
\sendmethod{object}{initialise}{<Class-Defined>}
    \index{objects,creating}%
The ->initialise method of a class defines what happens when an
instance of this class is created.
\sendmethod{object}{unlink}{}
    \index{object,remove}%
The ->unlink method describes what happens when an instance of this
class is removed from the object-base.
\sendmethod{object}{catch_all}{<Class-Defined>}
    \index{delegation}%
The ->catch_all method defines what happens with messages invoked
on this object that are not implemented by any method.  It may be used
to find-out about the delegation relations of the class.  See
section~\ref{sec:delegation}
\getmethod{object}{lookup}{<Class-Defined>}{object}
    \index{reusability}%
If defined, this method describes the lookup of already an already
defined instance instead of object creation.  For example

\begin{code}
1 ?- new(X, font(screen, roman, 13)).
X = @screen_roman_13
2 ?- new(Y, font(screen, roman, 13)).
Y = @screen_roman_13
\end{code}

The same instance of the reusable font instance is returned on a second
attempt to create a font from the same parameters.  Various classes
have this capability.
\getmethod{object}{convert}{<Class-Defined>}{object}
    \index{type,conversion}%
Defines what can be converted into an instance of this type.  If an instance
of this class is requested by a type but another object is provided
PCE will call this method to translate the given argument into an instance
of this class.
\getmethod{object}{catch_all}{<Class-Defined>}{any}
As ->catch_all, but for get-operations.
\end{description}


\section{Summary}

The online manuals integrate visualisation of PCE's internal
structure with a hyper-text system.  This approach guarantees
consistency between the documentation and the actual system and
integrates overview and documentation of library and user-defined
classes in one system.

The online manual tools provides various entry-points (classes,
global objects, predicate overview, keywords, etc.) to obtain a list
of {\em card summaries}.  Cards may be opened from these summary
lists to examine its contents.

Experience with the online manual tools indicate most users prefer
the tools over paper documentation such as the PCE 3.8 Reference
Manual.
