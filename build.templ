#!/bin/bash
#
# This is the script we use to   build  SWI-Prolog and all its packages.
# Copy the script to  `build',  edit   to  suit  the  local installation
# requirements and run it. Once correct, upgrading   to a new release is
# now limited to getting the new sources and run ./build.

# [EDIT] Prefix location of the installation. It is _not_ adviced to use
# a    versioned    prefix.    The    system      will     install    in
# $PREFIX/lib/pl-<version> and create symlinks from  $PREFIX/bin for the
# main  programs.  Users  can  always  use  older  versions  by  running
# $PREFIX/lib/pl-<version>/bin/<arch>/pl

PREFIX=$HOME

# [EDIT] Version of make to use.  This must be GNU-make.  On many
# proprietary Unix systems this is installed as 'gmake'.  On most
# open systems make is GNU-make.

MAKE=make

V=`cat VERSION`
makeonly=false

case "$1" in
   --make)	makeonly=true
		;;
   *)		;;
esac

if [ "$makeonly" = false ]; then
# [EDIT] Compiler options.
# 
#	CC:	 Which C-compiler to use
#	COFLAGS: Flags for the optimizer such as "-O3" or "-g"
# 	CMFLAGS: Machine flags such as "-m64" (64-bits on gcc)
# 	CIFLAGS: Include-path such as "-I/opt/include"
# 	LDFLAGS: Link flags such as "-L/opt/lib"
#
# Leaving an option blank leaves the choice to configure

# export CC=
# export COFLAGS=
# export CMFLAGS=
# export CIFLAGS=
# export LDFLAGS=
  export CFLAGS=$CMFLAGS $CIFLAGS

# [EDIT] Packages to configure.  Leaving it blank compiles all packages.
# export PKG=
  ./configure --prefix=$PREFIX --with-world 2>&1 | tee configure.out
fi

$MAKE 2>&1 | tee make.out
$MAKE install 2>&1 | tee make-install.out

