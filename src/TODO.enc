Character encoding issues
-------------------------

* For background, see

	http://www.websina.com/bugzero/kb/unicode-bom.html
	http://www.jorendorff.com/articles/unicode/index.html

Done:

	get, get0, get_code, get_byte, get_char
	put, put_code, put_byte, put_char
	atom_codes/2, atom_chars/2, name/2
	char_code/2,
	atom_concat/2, concat_atom/[2,3], string_concat/3
	downcase_atom/2 upcase_atom/2
	read/1 and friends
	write/1 and friends
	code_type/2, char_type/2
	atom_length/2, string_length/2
	'$raw_read'/[1,2],
	rl_add_history/1
	term_to_atom/2
	atom_to_term/3
	sub_atom/5, sub_string/5
	format/3
	sformat/3
	string_to_atom/2, string_to_list/2
	syntax error term for parsing strings
	init default encoding from LANG and assign to prolog_flag 'encoding'
	load_files/2: added encoding argument

TBD:
	dwim_match/[2,3]

	Foreign language handling:

		- file-name handling (PL_get_filename)
		- PL_get_term_value() issues

Performance analysis:

	- Reading files
	- Atom operations
		+ Sort list of atoms?

TBD Documentation:
	encoding property of streams
	:- encoding directive
	foreign-language interface
	
Windows: reading and writing ANSI files (traditional 8-bit files)

	GetACP() --> return ANSI code page
	GetCPInfo() --> find out max characters per byte
	if (1)
	{ create array 0..255
	  use MultiByteToWideChar() to create wchar map
	  use in Sgetcode() using encoding 'ansi'
	}

	Output: call WideCharToMultiByte() on buffer and emit result?


Alternatively

	read --> read buffer
	Map using MultiByteToWideChar()
	return chars from buffer

		- What about incomplete buffers?
			- Unsolvable (see many articles. M$ simply doesn't
			  get the problem).

	Could use GNU iconv, but the library is almost 1MB --> bloatware.
	Good for glibc based systems though!

