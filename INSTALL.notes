			Installing SWI-Prolog
			=====================

Last updated: Aug 12, 2008

Configuration, compilation and installation is based on the GNU autoconf
package and consists of two steps:  builting the basic SWI-Prolog system
and building the packages.

SWI-Prolog can only be built using   GNU-Make. On many non-linux systems
this is installed as gmake.

Although the system compiles using a  wide variety of C-compilers, using
GCC avoids a lot of trouble. The   configure  script has very incomplete
and sometimes aged default  compiler  settings   for  the  system native
compiler, so in most case you will need to modify the CFLAGS and LDFLAGS
definitions in the Makefile to reach at optimal results.


Using the build.templ script
----------------------------

The  bash-script  build.templ  contains  the   default  build  procedure
outlined above and  some  comments   and  skeleton  environment changes.
Especially for those who  want  to   update  SWI-Prolog  regulary, it is
recommended to copy this file to 'build' and edit it to suit your needs.
The file also gives some  hints   dealing  with non-default locations of
libraryes, non-standard compiler settings, etc.

If this fails, considering following the step-by-step instructions below
to get everything in place.


Building SWI-Prolog lite
------------------------

In normal cases, the following should do:

	% cd src
	% ./configure
	% gmake
	% gmake check
	% gmake install

By default, the system  is  installed   as  /usr/local/bin/pl,  with the
libraries in /usr/local/lib/pl-<version>.

	% ./configure --prefix=PREFIX


Building the SWI-Prolog packages
--------------------------------

	(Ensure the installed pl executable is in your path)
	% cd packages
	% ./configure
	% gmake
	% gmake install

The packages can also be  configured   and  build  individually from the
package itself. Most packages are installed with the ./configure && make
&& make install sequence.


Put the Prolog kernel in a shared object
========================================

There is limited support to compile the Prolog kernel in a shared object
rather than an executable and static library. This feature only works on
platforms where gcc provided standard support  for creating and managing
shared objects. Using shared objects is default on some platforms (MacOS
X and Linux on x86_64 (AMD64)).

	./configure --enable-shared

This creates $PLBASE/lib/$ARCH/libpl.so.<version> and   a  symbolic link
from $PLBASE/lib/$ARCH/libpl.so to  this  file.   The  executable  pl is
linked using -rpath=$PLBASE/lib/$ARCH.  This schema is likely to work on
other ELF-based platforms using GCC and GNU-ld.

Doing this causes the Prolog sources to be compiled with -fPIC (position
independent code). On  some  platform  this   can  lead  to  significant
performance  degradation.  The  approach   has    some   advantages  and
disadvantages:

	- `stand-alone' executables need the shared object
	- less performance for some processors (particularly on IA32)
	+ Easier linking, especially for complicated embedded systems
