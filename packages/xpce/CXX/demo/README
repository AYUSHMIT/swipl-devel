			XPCE/C++ and XPCE/Prolog/C++
			============================

Auther:		Jan Wielemaker, SWI, University of Amsterdam

Last updated:	Marh 27, 1997
		Tested in fixed for Solaris 2.5, gcc 2.7.2, Linux/ELF

This directory contains demos for the   XPCE/C++ interface.  These demos
have been developed to test  and   illustrate  the  functionality of the
interface; not to be pretty  looking   programs.   Please try the Prolog
demos to get an overview of the functionality of XPCE.

This  is  an  alpha   version   of    the   C++   interface.   See  also
$PCEHOME/README.CXX and the LaTeX documentation in $PCEHOME/man/CXX/


Compiling stand-alone executables
=================================

The file view.C defines a simple application that can be started as
	
	% ./view file ...

and creates an XPCE view object for   each  argument file. It dies after
the user closes the last view.

To compile it, run `make so'  in   the  ../../<arch> directory where you
have built XPCE. Now, do (use absolute paths   if  you want to start the
applications from another directory):

	% export LD_LIBRARY_PATH=../../<arch>
	% export PCEHOME=../..
	% make view.o
	% make view

Stand-alone executables need to be linked  to -lXPCE and -lXPCEmain. The
latter  provides  a  main()  wrapper  around  pceInitApplication()  that
initialises XPCE. The environment variable $PCEHOME   should  be set. It
you   donot   want    to    use     -lXPCEmain,    copy    and    modify
$PCEHOME/src/itf/main.c to suit your needs.


Loading XPCE/C++ defined classes in XPCE/(SWI-)Prolog
=====================================================

Compiling the demo
------------------

bnode.C defines the XPCE class b_node from C++.  Compile it using:

	% make bnode.so

pcerc.o is a  small  wrapper  to  make   the  .so  file  compliant  with
SWI-Prolog's load_foreign_library/1 predicate.  Now, run:

	% xpce
	?- load_foreign_library(bnode).
	?- manpce(b_node).

to verify the existence of the new class.

Problems and remarks
--------------------

    1) Linking. Global C++ constructors should work, and therefore, g++
       based shared objects need to be linked using:

	% g++ -shared file.o ... -o file.so -lXPCE

    2) SOLARIS: __builtin_new undefined
       Trying all the above on Solaris 2.5/g++ 2.7.2, all went well upto
       starting the manual, which actually starts querying the new
       class.  In this case the symbol __builtin_new was reported
       undefined.  This symbol is in -lgcc.  The only way I managed to
       get it to work is by relinking SWI-Prolog after adding
       `-u __builtin_new' to the LDFLAGS.

    3) LINUX: Applications cause a segmentation fault immediately
       For one or another reason, you cannot link to the dynamic
       -lg++ library.  Don't ask me why.  See Makefile for details.
