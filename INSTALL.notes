			Installing SWI-Prolog
			=====================

			   Jan Wielemaker
			(jan@swi.psy.uva.nl)


Configuration, compilation and installation is  now   based  on  the GNU
autoconf package.  It is my hope that   this, together with many updates
to the source code will  make  the   installation  much  easier  on most
machines.

In normal cases, the following should do:

	% cd src
	% ./configure
	% make
	% make install

By default, the system  is  installed   as  /usr/local/bin/pl,  with the
libraries in /usr/local/lib/pl-<version>.

	% ./configure --prefix=PREFIX

Building for multiple architectures
===================================

To build for a second architecture, you  should either clean the sources
using `make distclean' or make  a  new   directory  next  to  the source
directory and run configure in  this   directory.  The  latter procedure
requires GNU-MAKE.  For example:

	% mkdir rs6000
	% cd rs6000
	% ../src/configure
	% make
	% make install

Building a runtime version
==========================

The runtime version has  no  tracer,   doesn't  handle  interrupts (just
exits), has no profiler and no readline   included.  To build it using a
separate directory:

	% mkdir rt
	% cd rt
	% ../src/configure --enable-runtime
	% make
	% make install

Some things may need attention:
===============================

# GNU readline library

When present, SWI-Prolog will  automatically   include  the GNU readline
library.  It is *strongly*  adviced  to   install  this  library on your
system.  It provides editing of previously entered commands (history) as
well as completion on Prolog atoms and filenames (for consult, etc.).

SWI-Prolog has been linked  with  versions  1.1,   1.2  and  2.0  of the
readline library.

# Foreign language interface (dynamic linker)

Incremental linking may be based on several mechanisms provided by the
operating system:

	1) AIX load() and friends
	2) MACH rld_load() and friends
	3) BSD Unix `ld -A' combined with reading BSD a.out file
	4) dlopen() and friends.
	5) Win32 (Windows-NT, '95 and win32s) .DLL interface

By default, SWI-Prolog will  guess  whether  it   can  use  any  of 1-3.
Detection of 1) and 2) is quite  safe.    It  might detect 3), while the
actuall compilation of pl-load.c fails.  In   this case #undef O_FOREIGN
in config.h and report the problem (please with a fix :-).

4) (dlopen()) sometimes conflicts with 3).    Because  older versions of
SWI-Prolog provided 3) on these machines, 4) is not included by default.
If you want dlopen() and friends, configure using

	./configure --enable-shared

# Saved states (save/[1,2], save_program/[1,2])

Configure will try to compile and  run   pl-save.c  using -Dtest.  If it
fails this test, please look at  the   header  of pl-save.c for possible
fixes.  Many systems will need special  declarations to inform save() of
the active program data-area (which it assumes to range from &environ to
sbrk(0)).  Please report misbehaviour (with patch would be great).

save/[1,2] and save_program/[1,2] are getting  out   of  fashion  as the
schema proves difficult to port to modern machines using shared libaries
which make it very hard to gather the process state.

New releases (as of  2.1.4)   provide  qsave_program/[1,2]  which create
portable saved states  that  may  be   loaded  on  emulators  running on
different hardware.

# Memory mapped stacks

Configure will see if mmap() may be used to allocate the stacks.  If you
think this should be possible, but Configure   says `no', please work on
test/mmap.c

# Assembler warnings

If you get assembler warnings compiling pl-wam.c, try #define NO_ASM_NOP
1 in config.h.  Should be determined automatically by test/nop.c
